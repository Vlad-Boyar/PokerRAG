import os
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def main():
    print("üü¢ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    await app.initialize()
    await app.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç /start")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∂–¥–µ–º, –ø–æ–∫–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        # fallback –¥–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ event loop (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ VS Code)
        print("‚ö†Ô∏è Event loop —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, fallback...")
        loop = asyncio.get_event_loop()
        loop.create_task(main())
